{"version":3,"sources":["webpack://Demo/./node_modules/performance-now/lib/performance-now.js","webpack://Demo/webpack/bootstrap","webpack://Demo/webpack/runtime/compat get default export","webpack://Demo/webpack/runtime/define property getters","webpack://Demo/webpack/runtime/hasOwnProperty shorthand","webpack://Demo/webpack/runtime/make namespace object","webpack://Demo/./src/Color.js","webpack://Demo/./src/index.js","webpack://Demo/./src/rm-06.vert","webpack://Demo/./src/rm-06.frag"],"names":["getNanoSeconds","hrtime","loadTime","moduleLoadTime","nodeLoadTime","upTime","performance","now","module","exports","process","hr","uptime","Date","getTime","call","this","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","r","Symbol","toStringTag","value","colorRegExp","hex","s","toString","length","hue2rgb","p","q","t","canvas","gl","vao","program","u_time","u_resolution","u_mouse","u_palette","u_shiny","mouseDown","startX","startY","canvasBounds","Color","g","b","color","m","exec","col","parseInt","substring","factor","Array","isArray","array","Float32Array","f","off","i","from","validate","Error","h","l","Math","round","other","ratio","out","config","sqrt","PI","width","height","mouseX","mouseY","resize","window","innerWidth","innerHeight","viewport","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","main","time","uniform1f","perfNow","uniform2f","uniform4f","clearColor","clear","COLOR_BUFFER_BIT","primitiveType","TRIANGLES","drawArrays","requestAnimationFrame","onMouseMove","ev","clientX","left","self","pageXOffset","clientY","top","pageYOffset","onMouseDown","onMouseUp","onload","document","getElementById","getContext","parentNode","removeChild","innerHTML","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createVertexArray","bindVertexArray","enableVertexAttribArray","FLOAT","vertexAttribPointer","getUniformLocation","useProgram","addEventListener","getBoundingClientRect","paletteArray","uniform3fv","uniform1fv"],"mappings":"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","file":"bundle-main-eaea1b0bad001e4e0453.js","sourcesContent":["// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const colorRegExp = /^(#)?([0-9a-f]+)$/i;\n\nfunction hex(n)\n{\n    const s = n.toString(16);\n\n    return s.length === 1 ? \"0\" + s : s;\n}\n\nfunction hue2rgb(p, q, t){\n    if(t < 0) t += 1;\n    if(t > 1) t -= 1;\n    if(t < 1/6) return p + (q - p) * 6 * t;\n    if(t < 1/2) return q;\n    if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n}\n\nexport default class Color\n{\n    r;\n    g;\n    b;\n\n    constructor(r,g,b)\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    mix(other, ratio, out)\n    {\n        if (!out)\n        {\n            out = new Color();\n        }\n        out.r = (this.r + (other.r - this.r) * ratio)|0;\n        out.g = (this.g + (other.g - this.g) * ratio)|0;\n        out.b = (this.b + (other.b - this.b) * ratio)|0;\n\n        return out;\n    }\n\n    multiply(n, out)\n    {\n        if (!out)\n        {\n            out = new Color();\n        }\n\n        out.r = this.r * n;\n        out.g = this.g * n;\n        out.b = this.b * n;\n        return out;\n    }\n\n    toRGBHex()\n    {\n        return \"#\" + hex(this.r) + hex(this.g) + hex(this.b );\n    }\n\n    toHex()\n    {\n        return (this.r << 16) + (this.g << 8) + this.b;\n    }\n\n    static validate(color)\n    {\n\n        let m;\n        if (typeof color !== \"string\" || !(m = colorRegExp.exec(color)))\n        {\n            return null;\n        }\n        const col = m[2];\n\n        if (col.length === 3)\n        {\n            return new Color(\n                parseInt(col[0], 16) * 17,\n                parseInt(col[1], 16) * 17,\n                parseInt(col[2], 16) * 17\n            )\n        }\n        else if (col.length === 6)\n        {\n            return new Color(\n                parseInt(col.substring(0, 2), 16),\n                parseInt(col.substring(2, 4), 16),\n                parseInt(col.substring(4, 6), 16)\n            )\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    static from(color, factor = 1.0)\n    {\n        if (Array.isArray(color))\n        {\n            const length = color.length;\n            const array = new Float32Array(length * 3);\n\n            const f = factor/255;\n\n            let off = 0;\n            for (let i = 0; i < length; i++)\n            {\n                const col = Color.from(color[i]);\n                array[off++] = col.r * f;\n                array[off++] = col.g * f;\n                array[off++] = col.b * f;\n            }\n\n            return array;\n        }\n\n        const col = Color.validate(color);\n\n        if (!col)\n        {\n            throw new Error(\"Invalid color \" + color);\n        }\n\n        col.r *= factor;\n        col.g *= factor;\n        col.b *= factor;\n\n        return col;\n    }\n\n    static fromHSL(h,s,l)\n    {\n        let r, g, b;\n\n        if(s <= 0){\n            r = g = b = l; // achromatic\n        }else{\n\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return new Color(\n            Math.round(r * 255),\n            Math.round(g * 255),\n            Math.round(b * 255)\n        );\n    }\n}\n\n","// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\nimport perfNow from \"performance-now\"\n\nimport vertexShaderSource from \"./rm-06.vert\"\nimport fragmentShaderSource from \"./rm-06.frag\"\nimport Color from \"./Color\";\n\n//console.log(fragmentShaderSource)\n\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst TAU = Math.PI * 2;\nconst DEG2RAD_FACTOR = TAU / 360;\n\nconst config = {\n    width: 0,\n    height: 0\n};\n\nlet canvas, gl, vao, program;\n\n\n// uniform: current time\nlet u_time;\n\nlet u_resolution;\n\nlet u_mouse;\n\nlet u_palette;\n\nlet u_shiny;\n\nlet mouseX = 0, mouseY = 0, mouseDown, startX, startY;\n\n// Get the container element's bounding box\nlet canvasBounds;\n\nfunction resize()\n{\n    const width = (window.innerWidth) & ~15;\n    const height = (window.innerHeight) | 0;\n\n    config.width = width;\n    config.height = height;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    mouseX = width/2;\n    mouseY = height/2;\n\n    gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nfunction createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n\n    console.error(gl.getShaderInfoLog(shader));  // eslint-disable-line\n    gl.deleteShader(shader);\n    return undefined;\n}\n\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n\n    console.error(gl.getProgramInfoLog(program));  // eslint-disable-line\n    gl.deleteProgram(program);\n    return undefined;\n}\n\n\nfunction printError(msg)\n{\n    document.getElementById(\"out\").innerHTML = \"<p>\" + msg + \"</p>\";\n}\n\nfunction main(time)\n{\n    const f = mouseDown ? 1 : -1;\n\n    // update uniforms\n    gl.uniform1f(u_time, perfNow() / 1000.0);\n    gl.uniform2f(u_resolution, config.width, config.height);\n    gl.uniform4f(u_mouse, mouseX, config.height - mouseY, startX * f, (config.height - startY) * f);\n\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    // draw\n    const primitiveType = gl.TRIANGLES;\n    const offset = 0;\n    const count = 6;\n    gl.drawArrays(primitiveType, offset, count);\n\n    requestAnimationFrame(main);\n}\n\n\nwindow.onload = () => {\n    // Get A WebGL context\n    canvas = document.getElementById(\"screen\");\n    gl = canvas.getContext(\"webgl2\");\n    if (!gl) {\n        canvas.parentNode.removeChild(canvas);\n        printError(\"Cannot run shader. Your browser does not support WebGL2.\");\n        return;\n    }\n\n    // create GLSL shaders, upload the GLSL source, compile the shaders\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n    // Link the two shaders into a program\n    program = createProgram(gl, vertexShader, fragmentShader);\n\n    // look up where the vertex data needs to go.\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n\n    // Create a buffer and put three 2d clip space points in it\n    const positionBuffer = gl.createBuffer();\n\n    // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    const positions = [\n        -1, -1,\n         1, -1,\n        -1, 1,\n        -1, 1,\n         1, 1,\n         1,-1\n    ];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    // Create a vertex array object (attribute state)\n    vao = gl.createVertexArray();\n\n    // and make it the one we're currently working with\n    gl.bindVertexArray(vao);\n\n    // Turn on the attribute\n    gl.enableVertexAttribArray(positionAttributeLocation);\n\n    // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n    const size = 2;          // 2 components per iteration\n    const type = gl.FLOAT;   // the data is 32bit floats\n    const normalize = false; // don't normalize the data\n    const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\n    let offset = 0;        // start at the beginning of the buffer\n    gl.vertexAttribPointer(\n        positionAttributeLocation, size, type, normalize, stride, offset);\n\n    resize();\n\n    // Tell WebGL how to convert from clip space to pixels\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n\n    u_time = gl.getUniformLocation(program, \"u_time\");\n    u_resolution = gl.getUniformLocation(program, \"u_resolution\");\n    u_mouse = gl.getUniformLocation(program, \"u_mouse\");\n    u_palette = gl.getUniformLocation(program, \"u_palette\");\n    u_shiny = gl.getUniformLocation(program, \"u_shiny\");\n\n    // Tell it to use our program (pair of shaders)\n    gl.useProgram(program);\n\n    // Bind the attribute/buffer set we want.\n    gl.bindVertexArray(vao);\n\n    window.addEventListener(\"resize\", resize, true);\n    canvas.addEventListener(\"mousemove\", onMouseMove, true);\n    canvas.addEventListener(\"mousedown\", onMouseDown, true);\n    document.addEventListener(\"mouseup\", onMouseUp, true);\n\n    canvasBounds = document.getElementById(\"screen\").getBoundingClientRect();\n\n    const paletteArray = Color.from(\n        [\n            \"#000\",\n            \"#fff\",\n            \"#c02\",\n            \"#00244f\",\n            \"#004d9d\",\n            \"#010101\",\n            \"#4c3a25\",\n            \"#f0f\"\n        ],\n        1\n    );\n\n\n    gl.uniform3fv(u_palette, paletteArray);\n    gl.uniform1fv(u_shiny, new Float32Array([\n        10,\n        10,\n        10,\n        10,\n        10,\n        10,\n        10,\n        10\n    ]));\n\n    requestAnimationFrame(main)\n}\n\n\n\n// Apply the mouse event listener\n\nfunction onMouseMove(ev)\n{\n    if (mouseDown)\n    {\n        mouseX = (ev.clientX - canvasBounds.left) + self.pageXOffset;\n        mouseY = (ev.clientY - canvasBounds.top) + self.pageYOffset;\n    }\n}\n\nfunction onMouseDown(ev)\n{\n    mouseDown = true;\n    startX = (ev.clientX - canvasBounds.left) + self.pageXOffset;\n    startY = (ev.clientY - canvasBounds.top) + self.pageYOffset;\n    mouseX = startX;\n    mouseY = startY;\n}\n\nfunction onMouseUp(ev)\n{\n    mouseDown = false;\n}\n\n","export default \"#version 300 es\\n#define GLSLIFY 1\\n\\n// an attribute is an input (in) to a vertex shader.\\n// It will receive data from a buffer\\nin vec4 a_position;\\n\\n// all shaders have a main function\\nvoid main() {\\n\\n    // gl_Position is a special variable a vertex shader\\n    // is responsible for setting\\n    gl_Position = a_position;\\n}\\n\";","export default \"#version 300 es\\nprecision lowp float;\\n#define GLSLIFY 1\\n\\nuniform float u_time;\\nuniform vec2 u_resolution;\\nuniform vec4 u_mouse;\\nuniform vec3 u_palette[8];\\nuniform float u_shiny[8];\\n\\nconst float pi = 3.141592653589793;\\nconst float tau = pi * 2.0;\\nconst float hpi = pi * 0.5;\\nconst float phi = (1.0+sqrt(5.0))/2.0;\\n\\nout vec4 outColor;\\n\\n#define MAX_STEPS 100\\n#define MAX_DIST 150.\\n#define SURF_DIST .001\\n\\n#define ROT(a) mat2(cos(a), -sin(a), sin(a), cos(a))\\n#define SHEARX(a) mat2(1, 0, sin(a), 1)\\n\\n////////////////////// NOISE\\n\\n//\\tSimplex 3D Noise\\n//\\tby Ian McEwan, Ashima Arts\\n//\\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\\n\\nfloat snoise(vec3 v){\\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n    // First corner\\n    vec3 i  = floor(v + dot(v, C.yyy) );\\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n    // Other corners\\n    vec3 g = step(x0.yzx, x0.xyz);\\n    vec3 l = 1.0 - g;\\n    vec3 i1 = min( g.xyz, l.zxy );\\n    vec3 i2 = max( g.xyz, l.zxy );\\n\\n    //  x0 = x0 - 0. + 0.0 * C\\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\\n\\n    // Permutations\\n    i = mod(i, 289.0 );\\n    vec4 p = permute( permute( permute(\\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n    // Gradients\\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\\n    float n_ = 1.0/7.0; // N=7\\n    vec3  ns = n_ * D.wyz - D.xzx;\\n\\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\\n\\n    vec4 x_ = floor(j * ns.z);\\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n    vec4 x = x_ *ns.x + ns.yyyy;\\n    vec4 y = y_ *ns.x + ns.yyyy;\\n    vec4 h = 1.0 - abs(x) - abs(y);\\n\\n    vec4 b0 = vec4( x.xy, y.xy );\\n    vec4 b1 = vec4( x.zw, y.zw );\\n\\n    vec4 s0 = floor(b0)*2.0 + 1.0;\\n    vec4 s1 = floor(b1)*2.0 + 1.0;\\n    vec4 sh = -step(h, vec4(0.0));\\n\\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n    vec3 p0 = vec3(a0.xy,h.x);\\n    vec3 p1 = vec3(a0.zw,h.y);\\n    vec3 p2 = vec3(a1.xy,h.z);\\n    vec3 p3 = vec3(a1.zw,h.w);\\n\\n    //Normalise gradients\\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n    p0 *= norm.x;\\n    p1 *= norm.y;\\n    p2 *= norm.z;\\n    p3 *= norm.w;\\n\\n    // Mix final noise value\\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n    m = m * m;\\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n    dot(p2,x2), dot(p3,x3) ) );\\n}\\n\\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\\n\\n// Camera helper\\n\\nvec3 Camera(vec2 uv, vec3 p, vec3 l, float z) {\\n    vec3 f = normalize(l-p),\\n    r = normalize(\\n    cross(\\n    vec3(0, 1, 0),\\n    f\\n    )\\n    ),\\n    u = cross(f, r),\\n    c = p + f * z,\\n    i = c + uv.x*r + uv.y*u,\\n    d = normalize(i-p);\\n    return d;\\n}\\n\\n// 2d rotation matrix helper\\nmat2 Rot(float a) {\\n    float x = cos(a);\\n    float y = sin(a);\\n    return mat2(x, -y, y, x);\\n}\\n\\n// RAY MARCHING PRIMITIVES\\n\\nfloat smin(float a, float b, float k) {\\n    float h = clamp(0.5+0.5*(b-a)/k, 0., 1.);\\n    return mix(b, a, h) - k*h*(1.0-h);\\n}\\n\\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\\n    vec3 ab = b-a;\\n    vec3 ap = p-a;\\n\\n    float t = dot(ab, ap) / dot(ab, ab);\\n    t = clamp(t, 0., 1.);\\n\\n    vec3 c = a + t*ab;\\n\\n    return length(p-c)-r;\\n}\\n\\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\\n    vec3 ab = b-a;\\n    vec3 ap = p-a;\\n\\n    float t = dot(ab, ap) / dot(ab, ab);\\n    //t = clamp(t, 0., 1.);\\n\\n    vec3 c = a + t*ab;\\n\\n    float x = length(p-c)-r;\\n    float y = (abs(t-.5)-.5)*length(ab);\\n    float e = length(max(vec2(x, y), 0.));\\n    float i = min(max(x, y), 0.);\\n\\n    return e+i;\\n}\\n\\nfloat sdCappedCylinder( vec3 p, float h, float r )\\n{\\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\\n}\\n\\nfloat sdSphere(vec3 p, float s)\\n{\\n    return length(p)-s;\\n}\\n\\nfloat sdTorus(vec3 p, vec2 r) {\\n    float x = length(p.xz)-r.x;\\n    return length(vec2(x, p.y))-r.y;\\n}\\n\\nfloat sdRoundBox(vec3 p, vec3 b, float r)\\n{\\n    vec3 q = abs(p) - b;\\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;\\n}\\n\\nfloat sdBeam(vec3 p, vec3 c)\\n{\\n    return length(p.xz-c.xy)-c.z;\\n}\\n\\nfloat dBox(vec3 p, vec3 s) {\\n    p = abs(p)-s;\\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\\n}\\n\\nvec2 opUnion(vec2 curr, float d, float id)\\n{\\n    if (d < curr.x)\\n    {\\n        curr.x = d;\\n        curr.y = id;\\n    }\\n\\n    return curr;\\n}\\n\\nvec2 softMinUnion(vec2 curr, float d, float id)\\n{\\n    if (d < curr.x)\\n    {\\n        curr.x = smin(curr.x, d, 0.5);\\n        curr.y = id;\\n    }\\n\\n    return curr;\\n}\\n\\nfloat sdBoundingBox(vec3 p, vec3 b, float e)\\n{\\n    p = abs(p)-b;\\n    vec3 q = abs(p+e)-e;\\n    return min(min(\\n    length(max(vec3(p.x, q.y, q.z), 0.0))+min(max(p.x, max(q.y, q.z)), 0.0),\\n    length(max(vec3(q.x, p.y, q.z), 0.0))+min(max(q.x, max(p.y, q.z)), 0.0)),\\n    length(max(vec3(q.x, q.y, p.z), 0.0))+min(max(q.x, max(q.y, p.z)), 0.0));\\n}\\n\\nfloat sdHexPrism( vec3 p, vec2 h )\\n{\\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\\n    p = abs(p);\\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\\n    vec2 d = vec2(\\n    length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\\n    p.z-h.y );\\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\\n}\\n\\nfloat shape(float v, float x)\\n{\\n    return x > 0.0 ? -abs(v) : abs(v);\\n}\\n\\nconst mat2 frontPlaneRot = ROT(0.05235987755982988);\\nconst mat2 backPlaneRot = ROT(-0.05235987755982988);\\nconst mat2 sCutRot = ROT(0.88);\\nconst mat2 rotate90 = ROT(1.5707963267948966);\\nconst mat2 rotate60 = ROT(1.0471975511965976);\\nconst mat2 rotate30 = ROT(0.5235987755982988);\\nconst mat2 fourShear = SHEARX(-0.20943951023931953);\\n\\nconst float sin60 = sin(tau/6.0);\\nvec2 N22 (vec2 p) {\\n    vec3 a = fract(p.xyx*vec3(123.34, 234.34, 345.65));\\n    a += dot(a, a+34.45);\\n    return fract(vec2(a.x*a.y, a.y*a.z));\\n}\\n\\nfloat atan2(in float y, in float x)\\n{\\n    return abs(x) > abs(y) ? hpi - atan(x,y) : atan(y,x);\\n}\\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\\n\\nfloat sdRhombus( in vec2 p, in vec2 b )\\n{\\n    vec2 q = abs(p);\\n    float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\\n}\\nvec2 getDistance(vec3 p) {\\n\\n    float t = u_time * 0.61;\\n\\n    // ground plane\\n\\n    float pd = p.y;\\n\\n    vec2 result = vec2(pd, 1.0);\\n\\n    float box = sdSphere(p - vec3(0,3,0), 1.0   );\\n\\n    result = opUnion(result, box, 2.0);\\n\\n//    vec3 pHex = p;\\n//    pHex.yz *= rotate90;\\n//\\n//\\n//    //float box = dBox(p - vec3(0,1,0), vec3(1));\\n//    float prism = sdHexPrism(pHex - vec3(0,  0, 1.5 + sin(u_time)), vec2(0.5, 1.0)) - 0.05;\\n//    result = opUnion(result, prism, 1.0);\\n//\\n//    prism = sdHexPrism(pHex - vec3(0,  4, 1.05), vec2(0.5, 1.0)) - 0.05;\\n//    result = opUnion(result, prism, 1.0);\\n//\\n//    prism = sdHexPrism(pHex - vec3(0,  -4, 1.05), vec2(0.5, 1.0)) - 0.05;\\n//    result = opUnion(result, prism, 1.0);\\n//\\n//    prism = sdHexPrism(pHex - vec3(3,  0, 1.05), vec2(0.5, 1.0)) - 0.05;\\n//    result = opUnion(result, prism, 1.0);\\n//\\n//    prism = sdHexPrism(pHex - vec3(-3,  0, 1.05), vec2(0.5, 1.0)) - 0.05;\\n//    result = opUnion(result, prism, 1.0);\\n\\n    return result;\\n\\n}\\n\\nvec2 rayMarch(vec3 ro, vec3 rd) {\\n\\n    float dO = 0.;\\n    float id = 0.0;\\n\\n    for (int i=0; i < MAX_STEPS; i++) {\\n        vec3 p = ro + rd*dO;\\n        vec2 result = getDistance(p);\\n        float dS = result.x;\\n        dO += dS;\\n        id = result.y;\\n        if (dO > MAX_DIST || abs(dS) < SURF_DIST * 0.001*(dO*.125 + 1.))\\n        break;\\n    }\\n\\n    return vec2(dO, id);\\n}\\n\\nvec3 getNormal(vec3 p) {\\n    float d = getDistance(p).x;\\n    vec2 e = vec2(.001, 0);\\n\\n    vec3 n = d - vec3(\\n        getDistance(p-e.xyy).x,\\n        getDistance(p-e.yxy).x,\\n        getDistance(p-e.yyx).x\\n    );\\n\\n    return normalize(n);\\n}\\n\\nvec3 getPaletteColor(float id)\\n{\\n    int last = u_palette.length() - 1;\\n    //return id < float(last) ? mix(u_palette[int(id)], u_palette[int(id) + 1], fract(id)) : u_palette[last];\\n    return mix(u_palette[int(id)], u_palette[int(id) + 1], fract(id));\\n}\\n\\nvec3 applyFog(\\n    in vec3  rgb,      // original color of the pixel\\n    in float distance, // camera to point distance\\n    in vec3  rayOri,   // camera position\\n    in vec3  rayDir,\\n    in vec3 p     // camera to point vector\\n)\\n{\\n    float pos = p.z;\\n\\n    float c = 0.005;\\n    float b = 2.0;// + sin((pos + p.x * sin(pos * 0.27)) * 0.31 ) * 0.15 + sin(pos * 0.17 ) * 0.15;\\n\\n    float fogAmount = c * exp(-rayOri.y*b) * (1.0-exp( -distance*rayDir.y*b ))/rayDir.y;\\n    vec3  fogColor  = vec3(1);\\n    return mix( rgb, fogColor, fogAmount );\\n}\\n\\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\\n{\\n    float res = 1.0;\\n    float ph = 1e20;\\n    for( float t=0.001; t< MAX_DIST; )\\n    {\\n        float h = getDistance(ro + rd*t).x;\\n        if( h < 0.0001 )\\n            return 0.0;\\n\\n        float y = h * h / ( 2.0 * ph );\\n        float d = sqrt( h * h - y * y);\\n        res = min( res, k * d /max(0.0, t -y) );\\n        ph = h;\\n        t += h;\\n    }\\n    return res;\\n}\\n\\nvec3 getBackground(in vec3 n)\\n{\\n    vec3 col = n;// * 0.5 + 0.5;\\n\\n    col = col*col*col*col;\\n\\n    return (mix(vec3(1,0,0), vec3(0,1,0), -n.z) +\\n        mix(vec3(0,0,1), vec3(1,1,0), n.y) +\\n        mix(vec3(0,0,0), vec3(0,1,1), n.x));\\n}\\n\\nvoid main(void)\\n{\\n    vec2 uv = (gl_FragCoord.xy-.5*u_resolution.xy)/u_resolution.y;\\n    vec2 m = u_mouse.xy/u_resolution.xy;\\n\\n    vec3 ro = vec3(\\n        0,\\n        6.5,\\n        -8\\n    );\\n\\n    ro.yz *= Rot((-m.y + 0.5)* pi);\\n    ro.xz *= Rot((-m.x + 0.5)* 7.0);\\n\\n    vec3 lookAt = vec3(0, 2.5, 0);\\n\\n    vec3 rd = Camera(uv, ro, lookAt, 1.3);\\n\\n    vec3 col = getBackground(rd);\\n\\n    vec2 result = rayMarch(ro, rd);\\n\\n    float d = result.x;\\n\\n    vec3 p = ro + rd * d;\\n    if (d < MAX_DIST) {\\n\\n        vec3 lightPos = vec3(cos(u_time) * 8.0, 10, sin(u_time) * 8.0);\\n        //vec3 lightPos = vec3(-40,20,0);\\n        vec3 lightDir = normalize(lightPos - p);\\n        vec3 norm = getNormal(p);\\n\\n        vec3 lightColor = vec3(1.0);\\n\\n        float id = result.y;\\n\\n        // ambient\\n        vec3 ambient = lightColor * vec3(0.001,0.005,0.01);\\n\\n        // diffuse\\n        float diff = max(dot(norm, lightDir), 0.0);\\n        vec3 tone = getPaletteColor(id);\\n\\n        //float shadow = softshadow(p, lightDir, 2.0);\\n        //vec3 diffuse = lightColor * pow(vec3(shadow),vec3(1.0,1.2,1.5)) * (diff * tone);\\n\\n        // specular\\n        vec3 viewDir = normalize(rd);\\n        vec3 reflectDir = reflect(lightDir, norm);\\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_shiny[int(id)]);\\n        float shadow = softshadow(p, lightDir, 0.9);\\n        vec3 specular = lightColor * spec * vec3(0.7843,0.8823,0.9451);\\n\\n        vec3 ref = getBackground(reflect(rd, norm));\\n        vec3 diffuse = diff * tone;\\n\\n        col = ambient + ref * 0.01 + (diffuse + specular) * shadow;\\n\\n        col = pow(col, vec3(1.0/2.2));\\n        col = norm * 0.5 + 0.5;\\n    }\\n    //col = applyFog(col, d, ro, rd, p);\\n\\n    outColor = vec4(\\n        col,\\n        1.0\\n    );\\n\\n    //outColor = vec4(1,0,1,1);\\n}\\n\";"],"sourceRoot":""}