var Demo;!function(){var n={75:function(n){(function(){var e,t,r,o,a,i;"undefined"!=typeof performance&&null!==performance&&performance.now?n.exports=function(){return performance.now()}:"undefined"!=typeof process&&null!==process&&process.hrtime?(n.exports=function(){return(e()-a)/1e6},t=process.hrtime,o=(e=function(){var n;return 1e9*(n=t())[0]+n[1]})(),i=1e9*process.uptime(),a=o-i):Date.now?(n.exports=function(){return Date.now()-r},r=Date.now()):(n.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(this)}},e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return n[r].call(o.exports,o,o.exports,t),o.exports}t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,{a:e}),e},t.d=function(n,e){for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var r={};!function(){"use strict";t.r(r);var n=t(75),e=t.n(n);function o(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var a=/^(#)?([0-9a-f]+)$/i;function i(n){var e=n.toString(16);return 1===e.length?"0"+e:e}function c(n,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?n+6*(e-n)*t:t<.5?e:t<2/3?n+(e-n)*(2/3-t)*6:n}var l,s,v,f,u,p,d,x,m,h,y,g,b,w=function(){function n(e,t,r){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.r=void 0,this.g=void 0,this.b=void 0,this.r=e,this.g=t,this.b=r}var e,t,r;return e=n,r=[{key:"validate",value:function(e){var t;if("string"!=typeof e||!(t=a.exec(e)))return null;var r=t[2];return 3===r.length?new n(17*parseInt(r[0],16),17*parseInt(r[1],16),17*parseInt(r[2],16)):6===r.length?new n(parseInt(r.substring(0,2),16),parseInt(r.substring(2,4),16),parseInt(r.substring(4,6),16)):null}},{key:"from",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(Array.isArray(e)){for(var r=e.length,o=new Float32Array(3*r),a=t/255,i=0,c=0;c<r;c++){var l=n.from(e[c]);o[i++]=l.r*a,o[i++]=l.g*a,o[i++]=l.b*a}return o}var s=n.validate(e);if(!s)throw new Error("Invalid color "+e);return s.r*=t,s.g*=t,s.b*=t,s}},{key:"fromHSL",value:function(e,t,r){var o,a,i;if(t<=0)o=a=i=r;else{var l=r<.5?r*(1+t):r+t-r*t,s=2*r-l;o=c(s,l,e+1/3),a=c(s,l,e),i=c(s,l,e-1/3)}return new n(Math.round(255*o),Math.round(255*a),Math.round(255*i))}}],(t=[{key:"mix",value:function(e,t,r){return r||(r=new n),r.r=this.r+(e.r-this.r)*t|0,r.g=this.g+(e.g-this.g)*t|0,r.b=this.b+(e.b-this.b)*t|0,r}},{key:"multiply",value:function(e,t){return t||(t=new n),t.r=this.r*e,t.g=this.g*e,t.b=this.b*e,t}},{key:"toRGBHex",value:function(){return"#"+i(this.r)+i(this.g)+i(this.b)}},{key:"toHex",value:function(){return(this.r<<16)+(this.g<<8)+this.b}}])&&o(e.prototype,t),r&&o(e,r),n}(),_=(Math.sqrt(5),Math.PI,{width:0,height:0}),z=0,S=0;function A(){var n=-16&window.innerWidth,e=0|window.innerHeight;_.width=n,_.height=e,l.width=n,l.height=e,z=n/2,S=e/2,s.viewport(0,0,l.width,l.height)}function D(n,e,t){var r=n.createShader(e);if(n.shaderSource(r,t),n.compileShader(r),n.getShaderParameter(r,n.COMPILE_STATUS))return r;console.error(n.getShaderInfoLog(r)),n.deleteShader(r)}function C(n){var t=h?1:-1;s.uniform1f(u,e()()/1e3),s.uniform2f(p,_.width,_.height),s.uniform4f(d,z,_.height-S,y*t,(_.height-g)*t),s.clearColor(0,0,0,0),s.clear(s.COLOR_BUFFER_BIT);var r=s.TRIANGLES;s.drawArrays(r,0,6),requestAnimationFrame(C)}function R(n){h&&(z=n.clientX-b.left+self.pageXOffset,S=n.clientY-b.top+self.pageYOffset)}function I(n){h=!0,y=n.clientX-b.left+self.pageXOffset,g=n.clientY-b.top+self.pageYOffset,z=y,S=g}function P(n){h=!1}window.onload=function(){if(l=document.getElementById("screen"),!(s=l.getContext("webgl2")))return l.parentNode.removeChild(l),"Cannot run shader. Your browser does not support WebGL2.",void(document.getElementById("out").innerHTML="<p>Cannot run shader. Your browser does not support WebGL2.</p>");var n=D(s,s.VERTEX_SHADER,"#version 300 es\n#define GLSLIFY 1\n\n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nin vec4 a_position;\n\n// all shaders have a main function\nvoid main() {\n\n    // gl_Position is a special variable a vertex shader\n    // is responsible for setting\n    gl_Position = a_position;\n}\n"),e=D(s,s.FRAGMENT_SHADER,"#version 300 es\nprecision lowp float;\n#define GLSLIFY 1\n\nuniform float u_time;\nuniform vec2 u_resolution;\nuniform vec4 u_mouse;\nuniform vec3 u_palette[8];\nuniform float u_shiny[8];\n\nconst float pi = 3.141592653589793;\nconst float tau = pi * 2.0;\nconst float hpi = pi * 0.5;\nconst float phi = (1.0+sqrt(5.0))/2.0;\n\nout vec4 outColor;\n\n#define MAX_STEPS 100\n#define MAX_DIST 150.\n#define SURF_DIST .001\n\n#define ROT(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define SHEARX(a) mat2(1, 0, sin(a), 1)\n\n////////////////////// NOISE\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //  x0 = x0 - 0. + 0.0 * C\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0 );\n    vec4 p = permute( permute( permute(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n    dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\n// Camera helper\n\nvec3 Camera(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n    r = normalize(\n    cross(\n    vec3(0, 1, 0),\n    f\n    )\n    ),\n    u = cross(f, r),\n    c = p + f * z,\n    i = c + uv.x*r + uv.y*u,\n    d = normalize(i-p);\n    return d;\n}\n\n// 2d rotation matrix helper\nmat2 Rot(float a) {\n    float x = cos(a);\n    float y = sin(a);\n    return mat2(x, -y, y, x);\n}\n\n// RAY MARCHING PRIMITIVES\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5+0.5*(b-a)/k, 0., 1.);\n    return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n\n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n\n    vec3 c = a + t*ab;\n\n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n\n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n\n    vec3 c = a + t*ab;\n\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n\n    return e+i;\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p)-s;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdRoundBox(vec3 p, vec3 b, float r)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;\n}\n\nfloat sdBeam(vec3 p, vec3 c)\n{\n    return length(p.xz-c.xy)-c.z;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec2 opUnion(vec2 curr, float d, float id)\n{\n    if (d < curr.x)\n    {\n        curr.x = d;\n        curr.y = id;\n    }\n\n    return curr;\n}\n\nvec2 softMinUnion(vec2 curr, float d, float id)\n{\n    if (d < curr.x)\n    {\n        curr.x = smin(curr.x, d, 0.5);\n        curr.y = id;\n    }\n\n    return curr;\n}\n\nfloat sdBoundingBox(vec3 p, vec3 b, float e)\n{\n    p = abs(p)-b;\n    vec3 q = abs(p+e)-e;\n    return min(min(\n    length(max(vec3(p.x, q.y, q.z), 0.0))+min(max(p.x, max(q.y, q.z)), 0.0),\n    length(max(vec3(q.x, p.y, q.z), 0.0))+min(max(q.x, max(p.y, q.z)), 0.0)),\n    length(max(vec3(q.x, q.y, p.z), 0.0))+min(max(q.x, max(q.y, p.z)), 0.0));\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n    length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n    p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat shape(float v, float x)\n{\n    return x > 0.0 ? -abs(v) : abs(v);\n}\n\nconst mat2 frontPlaneRot = ROT(0.05235987755982988);\nconst mat2 backPlaneRot = ROT(-0.05235987755982988);\nconst mat2 sCutRot = ROT(0.88);\nconst mat2 rotate90 = ROT(1.5707963267948966);\nconst mat2 rotate60 = ROT(1.0471975511965976);\nconst mat2 rotate30 = ROT(0.5235987755982988);\nconst mat2 fourShear = SHEARX(-0.20943951023931953);\n\nconst float sin60 = sin(tau/6.0);\nvec2 N22 (vec2 p) {\n    vec3 a = fract(p.xyx*vec3(123.34, 234.34, 345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nfloat atan2(in float y, in float x)\n{\n    return abs(x) > abs(y) ? hpi - atan(x,y) : atan(y,x);\n}\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRhombus( in vec2 p, in vec2 b )\n{\n    vec2 q = abs(p);\n    float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n}\nvec2 getDistance(vec3 p) {\n\n    float t = u_time * 0.61;\n\n    // ground plane\n\n    float pd = p.y;\n\n    vec2 result = vec2(pd, 1.0);\n\n    float box = sdSphere(p - vec3(0,3,0), 1.0   );\n\n    result = opUnion(result, box, 2.0);\n\n//    vec3 pHex = p;\n//    pHex.yz *= rotate90;\n//\n//\n//    //float box = dBox(p - vec3(0,1,0), vec3(1));\n//    float prism = sdHexPrism(pHex - vec3(0,  0, 1.5 + sin(u_time)), vec2(0.5, 1.0)) - 0.05;\n//    result = opUnion(result, prism, 1.0);\n//\n//    prism = sdHexPrism(pHex - vec3(0,  4, 1.05), vec2(0.5, 1.0)) - 0.05;\n//    result = opUnion(result, prism, 1.0);\n//\n//    prism = sdHexPrism(pHex - vec3(0,  -4, 1.05), vec2(0.5, 1.0)) - 0.05;\n//    result = opUnion(result, prism, 1.0);\n//\n//    prism = sdHexPrism(pHex - vec3(3,  0, 1.05), vec2(0.5, 1.0)) - 0.05;\n//    result = opUnion(result, prism, 1.0);\n//\n//    prism = sdHexPrism(pHex - vec3(-3,  0, 1.05), vec2(0.5, 1.0)) - 0.05;\n//    result = opUnion(result, prism, 1.0);\n\n    return result;\n\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd) {\n\n    float dO = 0.;\n    float id = 0.0;\n\n    for (int i=0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        vec2 result = getDistance(p);\n        float dS = result.x;\n        dO += dS;\n        id = result.y;\n        if (dO > MAX_DIST || abs(dS) < SURF_DIST * 0.001*(dO*.125 + 1.))\n        break;\n    }\n\n    return vec2(dO, id);\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDistance(p).x;\n    vec2 e = vec2(.001, 0);\n\n    vec3 n = d - vec3(\n        getDistance(p-e.xyy).x,\n        getDistance(p-e.yxy).x,\n        getDistance(p-e.yyx).x\n    );\n\n    return normalize(n);\n}\n\nvec3 getPaletteColor(float id)\n{\n    int last = u_palette.length() - 1;\n    //return id < float(last) ? mix(u_palette[int(id)], u_palette[int(id) + 1], fract(id)) : u_palette[last];\n    return mix(u_palette[int(id)], u_palette[int(id) + 1], fract(id));\n}\n\nvec3 applyFog(\n    in vec3  rgb,      // original color of the pixel\n    in float distance, // camera to point distance\n    in vec3  rayOri,   // camera position\n    in vec3  rayDir,\n    in vec3 p     // camera to point vector\n)\n{\n    float pos = p.z;\n\n    float c = 0.005;\n    float b = 2.0;// + sin((pos + p.x * sin(pos * 0.27)) * 0.31 ) * 0.15 + sin(pos * 0.17 ) * 0.15;\n\n    float fogAmount = c * exp(-rayOri.y*b) * (1.0-exp( -distance*rayDir.y*b ))/rayDir.y;\n    vec3  fogColor  = vec3(1);\n    return mix( rgb, fogColor, fogAmount );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=0.001; t< MAX_DIST; )\n    {\n        float h = getDistance(ro + rd*t).x;\n        if( h < 0.0001 )\n            return 0.0;\n\n        float y = h * h / ( 2.0 * ph );\n        float d = sqrt( h * h - y * y);\n        res = min( res, k * d /max(0.0, t -y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvec3 getBackground(in vec3 n)\n{\n    vec3 col = n;// * 0.5 + 0.5;\n\n    col = col*col*col*col;\n\n    return (mix(vec3(1,0,0), vec3(0,1,0), -n.z) +\n        mix(vec3(0,0,1), vec3(1,1,0), n.y) +\n        mix(vec3(0,0,0), vec3(0,1,1), n.x));\n}\n\nvoid main(void)\n{\n    vec2 uv = (gl_FragCoord.xy-.5*u_resolution.xy)/u_resolution.y;\n    vec2 m = u_mouse.xy/u_resolution.xy;\n\n    vec3 ro = vec3(\n        0,\n        6.5,\n        -8\n    );\n\n    ro.yz *= Rot((-m.y + 0.5)* pi);\n    ro.xz *= Rot((-m.x + 0.5)* 7.0);\n\n    vec3 lookAt = vec3(0, 2.5, 0);\n\n    vec3 rd = Camera(uv, ro, lookAt, 1.3);\n\n    vec3 col = getBackground(rd);\n\n    vec2 result = rayMarch(ro, rd);\n\n    float d = result.x;\n\n    vec3 p = ro + rd * d;\n    if (d < MAX_DIST) {\n\n        vec3 lightPos = vec3(cos(u_time) * 8.0, 10, sin(u_time) * 8.0);\n        //vec3 lightPos = vec3(-40,20,0);\n        vec3 lightDir = normalize(lightPos - p);\n        vec3 norm = getNormal(p);\n\n        vec3 lightColor = vec3(1.0);\n\n        float id = result.y;\n\n        // ambient\n        vec3 ambient = lightColor * vec3(0.001,0.005,0.01);\n\n        // diffuse\n        float diff = max(dot(norm, lightDir), 0.0);\n        vec3 tone = getPaletteColor(id);\n\n        //float shadow = softshadow(p, lightDir, 2.0);\n        //vec3 diffuse = lightColor * pow(vec3(shadow),vec3(1.0,1.2,1.5)) * (diff * tone);\n\n        // specular\n        vec3 viewDir = normalize(rd);\n        vec3 reflectDir = reflect(lightDir, norm);\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_shiny[int(id)]);\n        float shadow = softshadow(p, lightDir, 0.9);\n        vec3 specular = lightColor * spec * vec3(0.7843,0.8823,0.9451);\n\n        vec3 ref = getBackground(reflect(rd, norm));\n        vec3 diffuse = diff * tone;\n\n        col = ambient + ref * 0.01 + (diffuse + specular) * shadow;\n\n        col = pow(col, vec3(1.0/2.2));\n        col = norm * 0.5 + 0.5;\n    }\n    //col = applyFog(col, d, ro, rd, p);\n\n    outColor = vec4(\n        col,\n        1.0\n    );\n\n    //outColor = vec4(1,0,1,1);\n}\n");f=function(n,e,t){var r=n.createProgram();if(n.attachShader(r,e),n.attachShader(r,t),n.linkProgram(r),n.getProgramParameter(r,n.LINK_STATUS))return r;console.error(n.getProgramInfoLog(r)),n.deleteProgram(r)}(s,n,e);var t=s.getAttribLocation(f,"a_position"),r=s.createBuffer();s.bindBuffer(s.ARRAY_BUFFER,r),s.bufferData(s.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,1,1,-1]),s.STATIC_DRAW),v=s.createVertexArray(),s.bindVertexArray(v),s.enableVertexAttribArray(t);var o=s.FLOAT;s.vertexAttribPointer(t,2,o,!1,0,0),A(),s.viewport(0,0,s.canvas.width,s.canvas.height),u=s.getUniformLocation(f,"u_time"),p=s.getUniformLocation(f,"u_resolution"),d=s.getUniformLocation(f,"u_mouse"),x=s.getUniformLocation(f,"u_palette"),m=s.getUniformLocation(f,"u_shiny"),s.useProgram(f),s.bindVertexArray(v),window.addEventListener("resize",A,!0),l.addEventListener("mousemove",R,!0),l.addEventListener("mousedown",I,!0),document.addEventListener("mouseup",P,!0),b=document.getElementById("screen").getBoundingClientRect();var a=w.from(["#000","#fff","#c02","#00244f","#004d9d","#010101","#4c3a25","#f0f"],1);s.uniform3fv(x,a),s.uniform1fv(m,new Float32Array([10,10,10,10,10,10,10,10])),requestAnimationFrame(C)}}(),Demo=r}();
//# sourceMappingURL=bundle-main-eaea1b0bad001e4e0453.js.map